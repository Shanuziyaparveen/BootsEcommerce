<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Include SweetAlert2 CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

  <style>
    body {
  background-color: #1f1f33;
  color: #f5f5f5;
  font-family: 'Poppins', sans-serif;
}

.container {
  margin-top: 20px;
  background-color: #2a2a40;
  padding: 30px;
  border-radius: 15px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.navbar {
  background-color: #1f1f33;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.navbar-right .btn {
  background-color:  #1f1f33;
  color: #fff;
}

.navbar-right .btn:hover {
  background-color:  #1f1f33;
}

.card {
  background: linear-gradient(145deg, #3a3a50, #2e2e40);
  border-radius: 10px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  color: #f5f5f5;
}

.card-body img {
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.btn-primary {
  background-color: #6f5ec7;
  border: none;
}

.btn-primary:hover {
  background-color: #5745a1;
}

.timeline li span {
  font-weight: bold;
}

.alert {
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.btn-danger, .btn-warning {
  transition: transform 0.3s ease;
}

.btn-danger:hover, .btn-warning:hover {
  transform: scale(1.05);
}

.breadcrumb a {
  color: #d1afdf;
  font-size: xx-large;
  transition: color 0.3s;
}

.breadcrumb a:hover {
  color:  #1f1f33;
}
.breadcrumb{
  background-color:  #1f1f33;
}
.breadcrumb span {
    margin-right: 15px; /* Adds spacing after separator */
    margin-left: 15px; /* Adds spacing before separator */
}
  </style>
</head>
<body>
  <div class="navbar">
    <div class="navbar-left">
        <a href="/" class="navbar-brand">
            <img src="/img/logo.png" alt="Logo" style="height: 60px;">
        </a>
    </div>
    <div class="navbar-center">
        <div class="breadcrumb">
            <a href="/" rel="nofollow">Home</a>
            <span></span>
            <a href="/getAllProducts" rel="nofollow">Shop</a>
            <span></span>
        </div>
    </div>
    <div class="navbar-right">
        <a href="/userProfile" class="btn border">
            <i class="fas fa-user text-primary"></i>
        </a>
        <a href="/cart" class="btn border">
            <i class="fas fa-shopping-cart text-primary"></i>
        </a>
    </div>
</div>

  
  <div class="container">
    <h3 class="text-center">Order Details</h3>
    <hr>


    <h5>Order ID: <%= order.orderId %></h5>
    <p><strong>Status:</strong> <span class="badge badge-info"><%= order.status %></span></p>
    <hr>

    <!-- Timeline for Order Status -->
    <h5>Order Progress</h5>
    <ul class="timeline">
      <li>
        <span>Ordered: <%= new Date(order.dates.ordered).toLocaleDateString() %></span>
      </li>
      <% if (order.dates.shipped) { %>
        <li>
          <span>Shipped: <%= new Date(order.dates.shipped).toLocaleDateString() %></span>
        </li>
      <% } %>
      <% if (order.dates.delivered) { %>
        <li>
          <span>Delivered: <%= new Date(order.dates.delivered).toLocaleDateString() %></span>
        </li>
      <% } %>
      <li>
        <span>Payment Method: <%= order.paymentMethod %></span>
      </li>
    </ul>
    <hr>

    <!-- Address Section -->
   <!-- Address Section -->
<h5>Delivery Address</h5>
<p>
  <strong>Name:</strong> <%= address.name %><br>
  
  <strong>City:</strong> <%= address.city %><br>
  <strong>State:</strong> <%= address.state %><br>
  <strong>Pincode:</strong> <%= address.pincode %><br>
  <strong>Phone:</strong> <%= address.phone %>
</p>

    <hr>

    <!-- Ordered Items Section -->
    <h5>Ordered Items</h5>
    <% order.orderedItems.forEach((item) => { %>
      <div class="card mb-3">
        <div class="card-body d-flex justify-content-between">
          <img 
          src="/uploads/re-image/<%= item.product.productImage[0] %>" 
          alt="<%= item.name %>" 
          style="width: 100px; height: auto; object-fit: cover;">
        
          <div>
           <a href="/" > <p><strong>Product:</strong> <%= item.product.productName %></p></a>
            <p><strong>Quantity:</strong> <%= item.quantity %></p>
          </div>
          <div>
            <p><strong>Price:</strong> 
              <!-- Regular price with strikethrough -->
              <span style="text-decoration: line-through; color: #888;">₹<%= item.product.regularPrice %></span> 
              <!-- Sale price -->
              <span style="color: #ff7f50; font-weight: bold;">₹<%= item.price %></span>
            </p>
          <!-- Display product status -->
          <% if (item.productStatus === 'Cancelled' || order.status === 'Cancelled' || order.status === 'Shipped' || order.status === 'Return Request' || order.status === 'Returned') { %>
            <p style="color: red; font-weight: bold;">Status: <%= item.productStatus %></p>
            <button class="btn btn-secondary action-btn" disabled>
              <%= item.productStatus === 'Return Request' ? 'Return Requested' : 'Cancelled/Non-Cancellable' %>
            </button>
          <% } else if (order.status === 'Delivered') { %>
            <% if (item.productStatus === 'Return Request') { %>
              <p style="color: orange; font-weight: bold;">Status: Return Requested</p>
              <button class="btn btn-secondary action-btn" disabled>Return Requested</button>
            <% } else { %>
              <p style="color: green; font-weight: bold;">Status: <%= order.status %></p>
              <button 
                class="btn btn-warning return-btn" 
                onclick="returnProduct('<%= item.product._id %>', '<%= order._id %>')">
                Return Item
              </button>
            <% } %>
          <% } else { %>
            <button 
              class="btn btn-danger cancel-btn" 
              onclick="cancelProduct('<%= item.product._id %>', '<%= order._id %>')">
              Cancel Item
            </button>
          <% } %>
          
          </div>
        </div>
      </div>
    <% }) %>
    <hr>
   
  <!-- Subtotal -->
  <p><strong>Subtotal:</strong> ₹<%= order.totalPrice %></p>

  <!-- Tax Calculation (10%) -->
  <% const tax = (order.totalPrice || 0) * 0.10; %>
  <p><strong>Tax (10%):</strong> ₹<%= tax.toFixed(2) %></p>
  <p><strong>Total Amount (Including Tax):</strong> ₹<%= (order.totalPrice + tax ).toFixed(2) %></p>
  <!-- Discount -->
  <p><strong>Discount:</strong> ₹<%= discount %></p>

  <!-- Wallet Amount (if any) -->
  <% if (walletAmount > 0) { %>
    <p><strong>Wallet Applied:</strong> ₹<%= walletAmount %></p>
  <% } %>

  <!-- Final Amount -->

  <!-- Total Amount (with Tax) -->
 
  <p><strong>Amount after discount:</strong> ₹<%= (order.finalAmount ).toFixed(2) %></p>
  <!-- Coupon Details (if any) -->
  <% if (order.coupon && order.coupon.applied) { %>
    <p><strong>Coupon Discount:</strong> ₹<%= order.coupon.discount %></p>
  <% } %>

   
<!-- Action Buttons
<% if (error) { %>
  <div class="alert alert-danger" role="alert">
    <%= error %>
  </div>
<% } %>

<% if (success) { %>
  <div class="alert alert-success" role="alert">
    <%= success %>
  </div>
<% } %> -->
<!-- Action Buttons -->
<div class="text-right">
  <% 
    const allCancelled = order.orderedItems.every(item => item.productStatus === 'Cancelled');
    const allReturnable = order.orderedItems.every(item => item.productStatus === 'Delivered');
    const allReturnRequested = order.orderedItems.every(item => item.productStatus === 'Return Request');
    const allReturned = order.orderedItems.every(item => item.productStatus === 'Returned');
  %>
  <% if (allCancelled) { %>
    <!-- Show "Order Cancelled" if all items are cancelled -->
    <button class="btn btn-secondary disabled-btn" disabled>Order Cancelled</button>
  <% } else if (allReturnRequested) { %>
    <!-- Show "Return Requested" if all items are under return request -->
    <button class="btn btn-secondary disabled-btn" disabled>Return Requested</button>
  <% } else if (allReturned) { %>
    <!-- Show "Order Returned" if all items have been returned -->
    <button class="btn btn-secondary disabled-btn" disabled>Order Returned</button>
  <% } else if (order.status === 'Pending' || order.status === 'Processing' || order.status === 'Shipped') { %>
    <!-- Allow cancelling the entire order -->
    <a href="/cancelOrder?id=<%= order._id %>" class="btn btn-danger">Cancel Order</a>
  <% } else if (order.status === 'Delivered' && allReturnable) { %>
    <!-- Allow returning the entire order if all items are returnable -->
    <button class="btn btn-warning" onclick="returnOrder('<%= order._id %>')">Return Order</button>
  <% } else { %>
    <!-- Disable other actions if no valid status applies -->
    <button class="btn btn-secondary disabled-btn" disabled>No Actions Available</button>
  <% } %>
</div>


  </div>
</body>
<script>
 function cancelProduct(productId, orderId) {
  // Use SweetAlert2 for the confirmation dialog
  Swal.fire({
    title: "Are you sure?",
    text: "This action will cancel the product in your order.",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, cancel it!",
    cancelButtonText: "No, keep it",
  }).then((result) => {
    if (result.isConfirmed) {
      // If confirmed, send a request to the backend
      fetch(`/cancel-product/${productId}?orderId=${orderId}`, {
        method: "GET",
      })
        .then((response) => response.json()) // Parse the JSON response
        .then((data) => {
          if (data.success) {
            // Show success message
            Swal.fire({
              title: "Canceled!",
              text: "The product has been canceled successfully.",
              icon: "success",
              confirmButtonColor: "#3085d6",
            }).then(() => {
              window.location.reload(); // Reload the page to reflect changes
            });
          } else {
            // Show error message
            Swal.fire({
              title: "Error",
              text: "Failed to cancel the product. Please try again.",
              icon: "error",
              confirmButtonColor: "#3085d6",
            });
          }
        })
        .catch((error) => {
          console.error("Error:", error);
          Swal.fire({
            title: "Error",
            text: "An error occurred. Please try again later.",
            icon: "error",
            confirmButtonColor: "#3085d6",
          });
        });
    }
  });
}
function returnOrder(orderId) {
  Swal.fire({
    title: 'Why do you want to return this order?',
    input: 'textarea',
    inputPlaceholder: 'Enter your reason for returning...',
    inputAttributes: {
      'aria-label': 'Enter your reason for returning'
    },
    showCancelButton: true,
    confirmButtonText: 'Submit Return',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    preConfirm: (reason) => {
      if (!reason) {
        Swal.showValidationMessage('Please provide a reason for the return');
        return false;
      }
      return reason; // Return the reason to be sent to the backend
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const reason = result.value;

      // Check if orderId and reason are valid before making the request
      if (!orderId || !reason) {
        Swal.fire({
          title: 'Error',
          text: 'Order ID and reason are required.',
          icon: 'error',
        });
        return;
      }

      fetch('/returnOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, reason }),
      })
        .then((response) => {
          console.log('Response status:', response.status);
          console.log('Response headers:', response.headers);
          if (!response.ok) {
            throw new Error('HTTP error ' + response.status);
          }
          return response.json();
        })
        .then((data) => {
          console.log('Response data:', data);
          if (data.success) {
            Swal.fire({
              title: 'Return Requested!',
              text: 'Your return request has been submitted successfully.',
              icon: 'success',
            }).then(() => {
              // Refresh the page after the success message
              location.reload();
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message || 'An error occurred.',
              icon: 'error',
            });
          }
        })
        .catch((error) => {
          console.error('Error during fetch:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred while submitting the request. ' + error.message,
            icon: 'error',
          });
        });
    }
  });
}
function returnProduct(productId, orderId) {
  Swal.fire({
    title: 'Why do you want to return this order?',
    input: 'textarea',
    inputPlaceholder: 'Enter your reason for returning...',
    inputAttributes: {
      'aria-label': 'Enter your reason for returning',
    },
    showCancelButton: true,
    confirmButtonText: 'Submit Return',
    cancelButtonText: 'Cancel',
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    preConfirm: (reason) => {
      if (!reason) {
        Swal.showValidationMessage('Please provide a reason for the return');
        return false;
      }
      return reason; // Return the reason to be sent to the backend
    },
  }).then((result) => {
    if (result.isConfirmed) {
      // Get the reason for return from the SweetAlert2 input
      const reason = result.value;

      // Send a request to the backend
      fetch(`/return-product/${productId}?orderId=${orderId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ reason }), // Send the reason in the request body
      })
        .then((response) => response.json()) // Parse the JSON response
        .then((data) => {
          if (data.success) {
            // Show success message
            Swal.fire({
              title: 'Return Requested!',
              text: 'Your return request has been submitted successfully.',
              icon: 'success',
              confirmButtonColor: '#3085d6',
            }).then(() => {
              window.location.reload(); // Reload the page to reflect changes
            });
          } else {
            // Show error message
            Swal.fire({
              title: 'Error',
              text: data.message || 'Failed to submit the return request. Please try again.',
              icon: 'error',
              confirmButtonColor: '#3085d6',
            });
          }
        })
        .catch((error) => {
          console.error('Error:', error);
          Swal.fire({
            title: 'Error',
            text: 'An error occurred. Please try again later.',
            icon: 'error',
            confirmButtonColor: '#3085d6',
          });
        });
    }
  });
}

</script>
</html>
