<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= (typeof product !== 'undefined') ? 'Edit Product' : 'Add Product' %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/admin/stylesheets/stylep.css">
    <style>
        .image-preview {
            width: 100px; /* Resizing the image preview */
            height: auto; /* Maintain aspect ratio */
            margin: 5px; /* Margin between images */
        }
        .image-preview-wrapper {
            position: relative;
            display: inline-block;
        }
        .btn-danger {
            position: absolute;
            top: 0;
            right: 0;
            z-index: 10; /* Ensure the delete button is above the image */
        }
    </style>
</head>
<body>
<div class="container mt-5">
  <h1 class="text-center mb-4"><%= product ? 'Edit Product' : 'Add Product' %></h1>  
  <form action="<%= product ? '/admin/products/edit/' + product._id : '/admin/products/add' %>" method="POST" enctype="multipart/form-data" class="row g-3" onsubmit="validateImageCount(event)">
    <div class="col-md-6">
      <label for="productName" class="form-label">Product Name</label>
      <input type="text" class="form-control" name="productName" id="productName" value="<%= product ? product.productName : '' %>" required aria-label="Product Name">
    </div>
    
    <div class="col-md-6">
      <label for="price" class="form-label">Price</label>
      <input type="number" class="form-control" name="price" id="price" value="<%= product ? product.price : '' %>" required min="0" step="0.01">
    </div>
    
    <div class="col-md-6">
      <label for="salePrice" class="form-label">Sale Price</label>
      <input type="number" class="form-control" name="salePrice" id="salePrice" value="<%= product ? product.salePrice : '' %>" min="0" step="0.01">
    </div>

    <div class="col-md-6">
      <div class="form-group">
        <label for="productImages" class="form-label">Upload Product Images (at least 3 images)</label>
        <input type="file" id="productImages" name="productImages" multiple accept="image/*" required class="form-control">
        <div id="imagePreviewContainer" class="mt-3"></div>
      </div>
    </div>

    <div class="col-md-12 mt-2" id="imagePreview">
      <h5>Selected Images:</h5>
      <div class="d-flex flex-wrap"></div>
    </div>

    <div class="col-md-6">
      <label for="sizesAvailable" class="form-label">Available Sizes</label>
      <select multiple class="form-control" name="sizesAvailable" id="sizesAvailable" required onchange="updateSelectedSizes()">
        <option value="S" <%= product && product.sizesAvailable.includes('S') ? 'selected' : '' %>>S</option>
        <option value="M" <%= product && product.sizesAvailable.includes('M') ? 'selected' : '' %>>M</option>
        <option value="L" <%= product && product.sizesAvailable.includes('L') ? 'selected' : '' %>>L</option>
        <option value="XL" <%= product && product.sizesAvailable.includes('XL') ? 'selected' : '' %>>XL</option>
        <option value="XXL" <%= product && product.sizesAvailable.includes('XXL') ? 'selected' : '' %>>XXL</option>
      </select>
      <div id="selectedSizes" class="mt-2"></div>
    </div>
    
    <div class="col-md-6">
      <label for="availableColors" class="form-label">Available Colors</label>
      <select multiple class="form-control" name="availableColors" id="availableColors" required onchange="updateSelectedColors()">
        <option value="Red" <%= product && product.availableColors.includes('Red') ? 'selected' : '' %>>Red</option>
        <option value="Blue" <%= product && product.availableColors.includes('Blue') ? 'selected' : '' %>>Blue</option>
        <option value="Green" <%= product && product.availableColors.includes('Green') ? 'selected' : '' %>>Green</option>
        <option value="Black" <%= product && product.availableColors.includes('Black') ? 'selected' : '' %>>Black</option>
        <option value="White" <%= product && product.availableColors.includes('White') ? 'selected' : '' %>>White</option>
      </select>
      <div id="selectedColors" class="mt-2"></div>
    </div>
    
    <div class="col-md-6">
      <label for="stock" class="form-label">Stock</label>
      <input type="number" class="form-control" name="stock" id="stock" value="<%= product ? product.stock : '' %>" required min="0">
    </div>

    <div class="col-md-6">
      <label for="productDescription" class="form-label">Product Description</label>
      <textarea class="form-control" name="productDescription" id="productDescription" rows="3" required><%= product ? product.productDescription : '' %></textarea>
    </div>
    
    <div class="col-12 text-center">
      <button type="submit" class="btn btn-primary"><%= product ? 'Update Product' : 'Add Product' %></button>
    </div>
  </form>
    
  <% if (product) { %>
  <div class="mt-5 text-center">
    <form action="/admin/products/delete/<%= product._id %>" method="POST" onsubmit="return confirm('Are you sure you want to delete this product?');">
      <button type="submit" class="btn btn-danger">Delete</button>
    </form>
  </div>
  <% } %>
    
  <div class="col-12 text-center">
    <a href="/admin/products" class="btn btn-secondary me-3">Go Back</a>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script>
  let selectedImages = [];

  function validateImageCount(event) {
      const fileInput = document.getElementById('productImages');
      const fileCount = fileInput.files.length;
      if (fileCount < 3) {
          alert("Please upload at least 3 images.");
          event.preventDefault(); // Prevent form submission
      }
  }

  // Function to preview selected images
  function previewSelectedImages() {
    const imagePreviewContainer = document.getElementById('imagePreviewContainer');
    
    // Clear previous previews
    imagePreviewContainer.innerHTML = '';

    // Loop through the selected images and display them
    selectedImages.forEach((file, index) => {
      const reader = new FileReader();
      reader.onload = function (e) {
        const imagePreview = document.createElement('div');
        imagePreview.classList.add('image-preview-wrapper');

        const img = document.createElement('img');
        img.src = e.target.result;
        img.classList.add('image-preview', 'img-thumbnail');

        const deleteBtn = document.createElement('button');
        deleteBtn.classList.add('btn', 'btn-danger', 'btn-sm');
        deleteBtn.innerHTML = '&times;';
        deleteBtn.onclick = function () {
          removeImage(index);
        };

        imagePreview.appendChild(img);
        imagePreview.appendChild(deleteBtn);
        imagePreviewContainer.appendChild(imagePreview);
      };
      reader.readAsDataURL(file);
    });
  }

  // Function to remove the selected image
  function removeImage(index) {
    selectedImages.splice(index, 1); // Remove image from array
    previewSelectedImages(); // Re-render preview
  }

  // Handle file input change
  document.getElementById('productImages').addEventListener('change', function (event) {
    const newFiles = Array.from(event.target.files);
    selectedImages = [...selectedImages, ...newFiles]; // Add new files to the existing array
    previewSelectedImages(); // Update the preview
  });

  function updateSelectedSizes() {
    const sizeSelect = document.getElementById('sizesAvailable');
    const selectedSizesContainer = document.getElementById('selectedSizes');
    selectedSizesContainer.innerHTML = ''; // Clear previous sizes

    // Get selected options and display them
    Array.from(sizeSelect.selectedOptions).forEach(option => {
      const size = document.createElement('span');
      size.classList.add('badge', 'bg-primary', 'me-1'); // Bootstrap badge for styling
      size.textContent = option.value;
      selectedSizesContainer.appendChild(size);
    });
  }

  function updateSelectedColors() {
    const colorSelect = document.getElementById('availableColors');
    const selectedColorsContainer = document.getElementById('selectedColors');
    selectedColorsContainer.innerHTML = ''; // Clear previous colors

    // Get selected options and display them
    Array.from(colorSelect.selectedOptions).forEach(option => {
      const color = document.createElement('span');
      color.classList.add('badge', 'bg-success', 'me-1'); // Bootstrap badge for styling
      color.textContent = option.value;
      selectedColorsContainer.appendChild(color);
    });
  }
</script>
</body>
</html>
