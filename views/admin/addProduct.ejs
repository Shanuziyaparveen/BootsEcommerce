<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Product</title>
  
  <link rel="stylesheet" href="/admin/stylesheets/addproduct.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
</head>
<body>
  <h1>Add Product</h1>

  <form action="/admin/products/add" method="POST" enctype="multipart/form-data">
    <div>
      <label for="productName">Product Name:</label>
      <input type="text" name="productName" id="productName" required>
    </div>

    <div>
      <label for="description">Product Description:</label>
      <textarea name="description" id="description" required></textarea>
    </div>

    <div>
      <label for="price">Price:</label>
      <input type="number" name="price" id="price" min="0" required>
    </div>

    <div>
      <label for="salePrice">Sale Price:</label>
      <input type="number" name="salePrice" id="salePrice" min="0">
    </div>
    <div class="form-group">
        <label for="sizesAvailable">Sizes Available:</label>
        <select name="sizesAvailable" id="sizesAvailable" multiple required>
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
          <option value="XXL">XXL</option>
        </select>
        <div id="selected-sizes" class="selected-options"></div> <!-- Selected sizes display -->
      </div>
      
      <div class="form-group">
        <label for="availableColors">Available Colors:</label>
        <select name="availableColors" id="availableColors" multiple required>
          <option value="Red">Red</option>
          <option value="Blue">Blue</option>
          <option value="Green">Green</option>
          <option value="Black">Black</option>
          <option value="White">White</option>
        </select>
        <div id="selected-colors" class="selected-options"></div> <!-- Selected colors display -->
      </div>
      

    <div>
      <label for="stock">Stock:</label>
      <input type="number" name="stock" id="stock" min="0" required>
    </div>

   <!-- Upload Images (At least 3): -->
<div>
    <label>Upload Images (At least 3):</label>
    <input type="file" name="images" id="images" accept="image/*" multiple required>
    <div id="image-preview"></div>
    <div id="cropped-canvas"></div>
  </div>
  
    <button type="submit">Add Product</button>
  </form>
  <a href="/admin/products" class="back-btn">Back to Products</a>
  <!-- Add Cropper.js and related scripts -->
  <script src="https://unpkg.com/cropperjs"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
  <script>
   let croppedImages = [];
const input = document.getElementById('images');
const preview = document.getElementById('image-preview');
const croppedCanvas = document.getElementById('cropped-canvas');

// Define default cropping dimensions
const cropWidth = 300;  // Set your desired crop width
const cropHeight = 300;  // Set your desired crop height

// Function to handle image upload
input.addEventListener('change', (e) => {
  preview.innerHTML = ''; // Clear previous previews
  croppedImages = []; // Reset cropped images array

  Array.from(e.target.files).forEach((file) => {
    const reader = new FileReader();
    reader.onload = function (event) {
      const img = document.createElement('img');
      img.src = event.target.result;
      img.style.maxWidth = '100%';
      preview.appendChild(img);

      // Create a new Image object for cropping
      const image = new Image();
      image.src = event.target.result;
      image.onload = () => {
        cropAndStoreImage(image);
      };
    };
    reader.readAsDataURL(file);
  });
});

// Function to crop and store image
function cropAndStoreImage(image) {
  // Create a canvas for cropping
  const canvas = document.createElement('canvas');
  canvas.width = cropWidth;
  canvas.height = cropHeight;

  const ctx = canvas.getContext('2d');
  
  // Draw the image onto the canvas with cropping
  const scale = Math.min(cropWidth / image.width, cropHeight / image.height);
  const x = (cropWidth / 2) - (image.width / 2) * scale;
  const y = (cropHeight / 2) - (image.height / 2) * scale;

  ctx.drawImage(image, x, y, image.width * scale, image.height * scale);

  canvas.toBlob((blob) => {
    croppedImages.push(blob);
    const imgURL = URL.createObjectURL(blob);
    const croppedImage = document.createElement('img');
    croppedImage.src = imgURL;
    croppedImage.className = 'cropped-image';
    croppedCanvas.appendChild(croppedImage);
  });
}

// Function to update selected sizes display
function updateSelectedSizes() {
  const sizesSelect = document.getElementById('sizesAvailable');
  const selectedSizesDiv = document.getElementById('selected-sizes');
  const selectedOptions = Array.from(sizesSelect.selectedOptions).map(option => option.value);
  selectedSizesDiv.textContent = selectedOptions.length > 0 ? 'Selected Sizes: ' + selectedOptions.join(', ') : '';
}

// Function to update selected colors display
function updateSelectedColors() {
  const colorsSelect = document.getElementById('availableColors');
  const selectedColorsDiv = document.getElementById('selected-colors');
  const selectedOptions = Array.from(colorsSelect.selectedOptions).map(option => option.value);
  selectedColorsDiv.textContent = selectedOptions.length > 0 ? 'Selected Colors: ' + selectedOptions.join(', ') : '';
}

// Add event listeners for size and color select elements
document.getElementById('sizesAvailable').addEventListener('change', updateSelectedSizes);
document.getElementById('availableColors').addEventListener('change', updateSelectedColors);
</script>

</body>
</html>
